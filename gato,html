<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>El Gato Pastelero</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Comic Sans MS', cursive, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            overflow-x: hidden;
        }

        h1 {
            color: #ff6b6b;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
            margin: 20px 0;
        }

        #game-container {
            position: relative;
            width: 800px;
            height: 500px;
            background: linear-gradient(to bottom, #87CEEB, #E0F7FA);
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        #game-canvas {
            background-color: transparent;
        }

        #ui {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.7);
            padding: 10px;
            border-radius: 5px;
            display: flex;
            gap: 15px;
        }

        .ui-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .ui-icon {
            width: 20px;
            height: 20px;
            background-size: contain;
            background-repeat: no-repeat;
        }

        #start-screen, #end-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            z-index: 10;
        }

        #end-screen {
            display: none;
        }

        button {
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            font-size: 18px;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            background: #ff8e8e;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

        .instructions {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 10px;
            margin: 20px;
            max-width: 600px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 850px) {
            #game-container {
                width: 95%;
                height: 400px;
            }
            
            .instructions {
                width: 90%;
            }
        }

        @media (max-width: 500px) {
            #ui {
                flex-direction: column;
                gap: 5px;
            }
        }
    </style>
</head>
<body>
    <h1>El Gato Pastelero</h1>
    
    <div class="instructions">
        ¡Ayuda al gato a recolectar todos los ingredientes para hacer un pastel!<br>
        Usa las flechas del teclado para moverte y la barra espaciadora para saltar.
    </div>
    
    <div id="game-container">
        <canvas id="game-canvas" width="800" height="500"></canvas>
        
        <div id="ui">
            <div class="ui-item">
                <div class="ui-icon" style="background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"%23FF6B6B\"><path d=\"M12 3c-4.97 0-9 3.185-9 7.115 0 2.557 1.522 4.82 3.889 6.115l-.78 2.77h11.782l-.78-2.77C19.478 14.935 21 12.672 21 10.115 21 6.185 16.97 3 12 3zm0 1c4.39 0 8 2.817 8 6.115 0 2.01-1.208 3.8-3.08 4.886l-.92.514.28.996.5 1.78H7.22l.5-1.78.28-.996-.92-.514C5.208 13.915 4 12.125 4 10.115 4 6.817 7.61 4 12 4z\"/></svg>');"></div>
                <span id="harina-counter">0</span>/3
            </div>
            <div class="ui-item">
                <div class="ui-icon" style="background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"%23FF6B6B\"><path d=\"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zM16 4v3.5l-4 4-4-4V4h8z\"/></svg>');"></div>
                <span id="huevos-counter">0</span>/2
            </div>
            <div class="ui-item">
                <div class="ui-icon" style="background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"%23FF6B6B\"><path d=\"M12 3c-3.148 0-6 2.553-6 5.702 0 3.148 2.602 6.907 6 12.298 3.398-5.391 6-9.15 6-12.298C18 5.553 15.148 3 12 3zm0 8c-1.105 0-2-.895-2-2s.895-2 2-2 2 .895 2 2-.895 2-2 2z\"/></svg>');"></div>
                <span id="frutas-counter">0</span>/4
            </div>
        </div>
        
        <div id="start-screen">
            <h2>El Gato Pastelero</h2>
            <p>Recolecta todos los ingredientes para hacer el mejor pastel</p>
            <button id="start-button">Comenzar</button>
        </div>
        
        <div id="end-screen">
            <h2>¡Pastel completado!</h2>
            <p>El gato ha recolectado todos los ingredientes</p>
            <button id="restart-button">Jugar de nuevo</button>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('game-canvas');
            const ctx = canvas.getContext('2d');
            const startScreen = document.getElementById('start-screen');
            const endScreen = document.getElementById('end-screen');
            const startButton = document.getElementById('start-button');
            const restartButton = document.getElementById('restart-button');
            const harinaCounter = document.getElementById('harina-counter');
            const huevosCounter = document.getElementById('huevos-counter');
            const frutasCounter = document.getElementById('frutas-counter');
            
            // Ajustar tamaño del canvas en dispositivos móviles
            function resizeCanvas() {
                const container = document.getElementById('game-container');
                canvas.width = container.clientWidth;
                canvas.height = container.clientHeight;
            }
            
            window.addEventListener('resize', resizeCanvas);
            resizeCanvas();
            
            // Variables del juego
            let gameRunning = false;
            let score = { harina: 0, huevos: 0, frutas: 0 };
            const required = { harina: 3, huevos: 2, frutas: 4 };
            
            // Objetos del juego
            const player = {
                x: 50,
                y: 400,
                width: 40,
                height: 60,
                speed: 5,
                jumpForce: 12,
                velocityY: 0,
                isJumping: false,
                direction: 'right'
            };
            
            const platforms = [
                { x: 0, y: 460, width: 200, height: 40 },
                { x: 250, y: 400, width: 150, height: 40 },
                { x: 450, y: 350, width: 150, height: 40 },
                { x: 650, y: 300, width: 150, height: 40 },
                { x: 500, y: 460, width: 300, height: 40 }
            ];
            
            let ingredients = [];
            
            // Generar ingredientes aleatorios
            function generateIngredients() {
                ingredients = [];
                
                // Harina (3)
                for (let i = 0; i < 3; i++) {
                    ingredients.push({
                        type: 'harina',
                        x: Math.random() * (canvas.width - 30),
                        y: Math.random() * (canvas.height - 100),
                        width: 20,
                        height: 20,
                        collected: false
                    });
                }
                
                // Huevos (2)
                for (let i = 0; i < 2; i++) {
                    ingredients.push({
                        type: 'huevos',
                        x: Math.random() * (canvas.width - 30),
                        y: Math.random() * (canvas.height - 100),
                        width: 20,
                        height: 20,
                        collected: false
                    });
                }
                
                // Frutas (4)
                for (let i = 0; i < 4; i++) {
                    ingredients.push({
                        type: 'frutas',
                        x: Math.random() * (canvas.width - 30),
                        y: Math.random() * (canvas.height - 100),
                        width: 20,
                        height: 20,
                        collected: false
                    });
                }
                
                // Asegurarse de que los ingredientes no estén en el aire sin plataforma
                ingredients.forEach(ing => {
                    let onPlatform = false;
                    for (const platform of platforms) {
                        if (ing.y + ing.height >= platform.y && 
                            ing.x + ing.width > platform.x && 
                            ing.x < platform.x + platform.width) {
                            onPlatform = true;
                            break;
                        }
                    }
                    
                    if (!onPlatform) {
                        ing.y = canvas.height - ing.height - 40;
                    }
                });
            }
            
            // Dibujar el gato
            function drawCat(x, y, width, height, direction) {
                ctx.save();
                ctx.translate(x + width/2, y + height/2);
                if (direction === 'left') {
                    ctx.scale(-1, 1);
                }
                
                // Cuerpo
                ctx.fillStyle = '#FFA500';
                ctx.beginPath();
                ctx.ellipse(0, 0, width/2, height/2, 0, 0, Math.PI * 2);
                ctx.fill();
                
                // Orejas
                ctx.fillStyle = '#FFA500';
                ctx.beginPath();
                ctx.moveTo(-width/3, -height/2);
                ctx.lineTo(-width/4, -height);
                ctx.lineTo(-width/6, -height/2);
                ctx.fill();
                
                ctx.beginPath();
                ctx.moveTo(width/3, -height/2);
                ctx.lineTo(width/4, -height);
                ctx.lineTo(width/6, -height/2);
                ctx.fill();
                
                // Ojos
                ctx.fillStyle = 'white';
                ctx.beginPath();
                ctx.ellipse(-width/6, -height/6, width/8, height/8, 0, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.beginPath();
                ctx.ellipse(width/6, -height/6, width/8, height/8, 0, 0, Math.PI * 2);
                ctx.fill();
                
                // Pupilas
                ctx.fillStyle = 'black';
                ctx.beginPath();
                ctx.ellipse(-width/6, -height/6, width/16, height/16, 0, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.beginPath();
                ctx.ellipse(width/6, -height/6, width/16, height/16, 0, 0, Math.PI * 2);
                ctx.fill();
                
                // Nariz
                ctx.fillStyle = 'pink';
                ctx.beginPath();
                ctx.moveTo(0, -height/10);
                ctx.lineTo(-width/12, height/10);
                ctx.lineTo(width/12, height/10);
                ctx.fill();
                
                // Bigotes
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 1;
                
                // Izquierda
                ctx.beginPath();
                ctx.moveTo(-width/12, height/10);
                ctx.lineTo(-width/3, height/8);
                ctx.stroke();
                
                ctx.beginPath();
                ctx.moveTo(-width/12, height/10);
                ctx.lineTo(-width/3, height/10);
                ctx.stroke();
                
                ctx.beginPath();
                ctx.moveTo(-width/12, height/10);
                ctx.lineTo(-width/3, height/12);
                ctx.stroke();
                
                // Derecha
                ctx.beginPath();
                ctx.moveTo(width/12, height/10);
                ctx.lineTo(width/3, height/8);
                ctx.stroke();
                
                ctx.beginPath();
                ctx.moveTo(width/12, height/10);
                ctx.lineTo(width/3, height/10);
                ctx.stroke();
                
                ctx.beginPath();
                ctx.moveTo(width/12, height/10);
                ctx.lineTo(width/3, height/12);
                ctx.stroke();
                
                ctx.restore();
            }
            
            // Dibujar plataformas
            function drawPlatforms() {
                ctx.fillStyle = '#8B4513';
                platforms.forEach(platform => {
                    ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
                    
                    // Textura de madera
                    ctx.strokeStyle = '#A0522D';
                    ctx.lineWidth = 2;
                    for (let i = 0; i < platform.width; i += 20) {
                        ctx.beginPath();
                        ctx.moveTo(platform.x + i, platform.y);
                        ctx.lineTo(platform.x + i, platform.y + platform.height);
                        ctx.stroke();
                    }
                });
            }
            
            // Dibujar ingredientes
            function drawIngredients() {
                ingredients.forEach(ing => {
                    if (!ing.collected) {
                        switch(ing.type) {
                            case 'harina':
                                ctx.fillStyle = '#FFFFFF';
                                ctx.beginPath();
                                ctx.arc(ing.x + ing.width/2, ing.y + ing.height/2, ing.width/2, 0, Math.PI * 2);
                                ctx.fill();
                                ctx.strokeStyle = '#CCCCCC';
                                ctx.stroke();
                                break;
                            case 'huevos':
                                ctx.fillStyle = '#F5F5DC';
                                ctx.beginPath();
                                ctx.ellipse(ing.x + ing.width/2, ing.y + ing.height/2, ing.width/2, ing.height/2, 0, 0, Math.PI * 2);
                                ctx.fill();
                                ctx.strokeStyle = '#D2B48C';
                                ctx.stroke();
                                break;
                            case 'frutas':
                                ctx.fillStyle = '#FF6347';
                                ctx.beginPath();
                                ctx.arc(ing.x + ing.width/2, ing.y + ing.height/2, ing.width/2, 0, Math.PI * 2);
                                ctx.fill();
                                ctx.fillStyle = '#228B22';
                                ctx.beginPath();
                                ctx.moveTo(ing.x + ing.width/2, ing.y);
                                ctx.lineTo(ing.x + ing.width/3, ing.y - 5);
                                ctx.lineTo(ing.x + ing.width/1.5, ing.y - 5);
                                ctx.fill();
                                break;
                        }
                    }
                });
            }
            
            // Verificar colisiones con plataformas
            function checkPlatformCollision() {
                let onPlatform = false;
                
                for (const platform of platforms) {
                    // Colisión vertical
                    if (player.y + player.height >= platform.y && 
                        player.y + player.height <= platform.y + platform.height &&
                        player.x + player.width > platform.x && 
                        player.x < platform.x + platform.width) {
                        
                        player.y = platform.y - player.height;
                        player.velocityY = 0;
                        player.isJumping = false;
                        onPlatform = true;
                    }
                }
                
                if (!onPlatform && player.y + player.height < canvas.height) {
                    player.isJumping = true;
                }
            }
            
            // Verificar colisiones con ingredientes
            function checkIngredientCollision() {
                ingredients.forEach(ing => {
                    if (!ing.collected && 
                        player.x < ing.x + ing.width &&
                        player.x + player.width > ing.x &&
                        player.y < ing.y + ing.height &&
                        player.y + player.height > ing.y) {
                        
                        ing.collected = true;
                        score[ing.type]++;
                        
                        // Actualizar contadores
                        harinaCounter.textContent = score.harina;
                        huevosCounter.textContent = score.huevos;
                        frutasCounter.textContent = score.frutas;
                        
                        // Verificar si se completó el pastel
                        if (score.harina >= required.harina && 
                            score.huevos >= required.huevos && 
                            score.frutas >= required.frutas) {
                            endGame();
                        }
                    }
                });
            }
            
            // Mover al jugador
            function movePlayer() {
                // Gravedad
                if (player.isJumping) {
                    player.velocityY += 0.5;
                }
                
                player.y += player.velocityY;
                
                // Limitar al jugador dentro del canvas
                if (player.y + player.height > canvas.height) {
                    player.y = canvas.height - player.height;
                    player.velocityY = 0;
                    player.isJumping = false;
                }
                
                if (player.x < 0) {
                    player.x = 0;
                }
                
                if (player.x + player.width > canvas.width) {
                    player.x = canvas.width - player.width;
                }
            }
            
            // Dibujar el juego
            function drawGame() {
                // Limpiar canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Dibujar cielo
                const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
                skyGradient.addColorStop(0, '#87CEEB');
                skyGradient.addColorStop(1, '#E0F7FA');
                ctx.fillStyle = skyGradient;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Dibujar nubes
                drawClouds();
                
                // Dibujar plataformas
                drawPlatforms();
                
                // Dibujar ingredientes
                drawIngredients();
                
                // Dibujar jugador
                drawCat(player.x, player.y, player.width, player.height, player.direction);
            }
            
            // Dibujar nubes de fondo
            function drawClouds() {
                ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
                
                // Nube 1
                ctx.beginPath();
                ctx.arc(100, 80, 30, 0, Math.PI * 2);
                ctx.arc(130, 80, 35, 0, Math.PI * 2);
                ctx.arc(160, 80, 30, 0, Math.PI * 2);
                ctx.arc(130, 60, 25, 0, Math.PI * 2);
                ctx.fill();
                
                // Nube 2
                ctx.beginPath();
                ctx.arc(400, 120, 25, 0, Math.PI * 2);
                ctx.arc(430, 120, 30, 0, Math.PI * 2);
                ctx.arc(460, 120, 25, 0, Math.PI * 2);
                ctx.arc(430, 100, 20, 0, Math.PI * 2);
                ctx.fill();
                
                // Nube 3
                ctx.beginPath();
                ctx.arc(600, 60, 20, 0, Math.PI * 2);
                ctx.arc(630, 60, 25, 0, Math.PI * 2);
                ctx.arc(660, 60, 20, 0, Math.PI * 2);
                ctx.arc(630, 40, 15, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // Bucle del juego
            function gameLoop() {
                if (!gameRunning) return;
                
                movePlayer();
                checkPlatformCollision();
                checkIngredientCollision();
                drawGame();
                
                requestAnimationFrame(gameLoop);
            }
            
            // Iniciar juego
            function startGame() {
                startScreen.style.display = 'none';
                endScreen.style.display = 'none';
                gameRunning = true;
                
                // Reiniciar jugador
                player.x = 50;
                player.y = 400;
                player.velocityY = 0;
                player.isJumping = false;
                player.direction = 'right';
                
                // Reiniciar puntaje
                score = { harina: 0, huevos: 0, frutas: 0 };
                harinaCounter.textContent = '0';
                huevosCounter.textContent = '0';
                frutasCounter.textContent = '0';
                
                // Generar ingredientes
                generateIngredients();
                
                // Iniciar bucle del juego
                gameLoop();
            }
            
            // Finalizar juego
            function endGame() {
                gameRunning = false;
                endScreen.style.display = 'flex';
            }
            
            // Event listeners
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', startGame);
            
            // Controles del teclado
            const keys = {
                left: false,
                right: false,
                up: false
            };
            
            window.addEventListener('keydown', (e) => {
                if (!gameRunning) return;
                
                switch(e.key) {
                    case 'ArrowLeft':
                        keys.left = true;
                        player.direction = 'left';
                        break;
                    case 'ArrowRight':
                        keys.right = true;
                        player.direction = 'right';
                        break;
                    case 'ArrowUp':
                    case ' ':
                        if (!player.isJumping) {
                            player.velocityY = -player.jumpForce;
                            player.isJumping = true;
                        }
                        break;
                }
            });
            
            window.addEventListener('keyup', (e) => {
                switch(e.key) {
                    case 'ArrowLeft':
                        keys.left = false;
                        break;
                    case 'ArrowRight':
                        keys.right = false;
                        break;
                }
            });
            
            // Mover al jugador según las teclas presionadas
            function handleMovement() {
                if (keys.left) {
                    player.x -= player.speed;
                }
                if (keys.right) {
                    player.x += player.speed;
                }
            }
            
            // Actualizar movimiento en un intervalo separado para mejor respuesta
            setInterval(() => {
                if (gameRunning) {
                    handleMovement();
                }
            }, 1000/60);
        });
    </script>
</body>
</html>
